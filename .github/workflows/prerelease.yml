# name of the action
name: prerelease

# trigger on release events
on:
  release:
    types: [created]

permissions:
  contents: read

# pipeline to execute
jobs:
  prerelease:
    runs-on: ubuntu-latest

    permissions:
      contents: write # for actions/github-script to upload release assets

    steps:
      - name: clone
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # ensures we fetch tag history for the repository
          fetch-depth: 0

      - name: install go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          # use version from go.mod file
          go-version-file: "go.mod"
          cache: true
          check-latest: true

      - name: build
        run: ./release.sh

      - name: upload binaries
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          retries: 3
          script: |
            const fs = require('fs');
            const path = require('path');

            const files = [
              "release/vela_checksums.txt",
              "release/vela_darwin_amd64.tar.gz",
              "release/vela_darwin_arm64.tar.gz",
              "release/vela_linux_amd64.tar.gz",
              "release/vela_linux_arm64.tar.gz",
              "release/vela_linux_arm.tar.gz",
              "release/vela_windows_amd64.tar.gz"
            ];

            for (const file of files) {
              try {
                if (!fs.existsSync(file)) {
                  core.warning(`File not found: ${file}`);
                  continue;
                }

                const fileContent = fs.readFileSync(file);
                const fileName = path.basename(file);

                core.info(`Uploading ${fileName}...`);

                const response = await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: context.payload.release.id,
                  name: fileName,
                  data: fileContent,
                });

                core.info(`Uploaded Asset: ${fileName} (${response.data.browser_download_url})`);
              } catch (error) {
                core.error(`Failed to upload ${file}: ${error.message}`);
                throw error;
              }
            }

      - name: login to dockerhub
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: extract metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: target/vela-cli
          tags: |
            # only on push tag, "raw" because {{version}} strips "v" prefix
            type=semver,pattern={{raw}}

      - name: build and push image
        id: push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
